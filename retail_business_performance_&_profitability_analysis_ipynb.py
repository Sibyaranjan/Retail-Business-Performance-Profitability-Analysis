# -*- coding: utf-8 -*-
"""Retail Business Performance & Profitability Analysis. ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wzrG1MI-zyZJF69Pj423BkqE1GV-JtS1
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# %matplotlib inline
import warnings
warnings.filterwarnings('ignore')
from datetime import datetime
import seaborn as sns

df = pd.read_csv("Retail sales dataset.csv")

df

df.head()

df.info()

df.isnull().sum()

df.duplicated().any()

df.isna().any()

df.describe()

for i in df.columns.to_list():
    print(f'No of unique values in {i} => {df[i].nunique()}.')

df.columns

df.columns = df.columns.str.replace(' ','_')

df.columns

sns.heatmap(df.isna());

num_col = []
for col in df.columns:
    if df[col].dtypes != 'object':
        num_col.append(col)

num_col

cat_col = []
for col in df.columns:
    if df[col].dtypes == 'object':
        cat_col.append(col)

cat_col

df1 = df.copy()

df1['Day'] = df1['Date'].str.split('-').str[2]
df1['Year'] = df1['Date'].str.split('-').str[0]

df1['Date'] = pd.to_datetime(df1['Date'])

df1['Month']  = df1['Date'].dt.month_name()

df1.head()

for col in df.select_dtypes('int').columns:
    plt.figure(figsize=(7,5))
    sns.boxplot(df[col])
    plt.xlabel(col)
    plt.show()

df1[df1.Price_per_Unit > df1.Total_Amount]

for col in df.select_dtypes('int').columns:
    plt.figure(figsize=(10, 5))
    sns.distplot(df[col], color='blue')

    plt.axvline(df[col].mean(), color='magenta', linestyle='dashed', linewidth = 2)
    plt.axvline(df[col].median(), color='cyan', linestyle='dashed', linewidth = 2)
    plt.xlabel(col, fontsize=13)
    plt.ylabel('count')
    plt.grid()
    plt.show()

df.groupby('Product_Category')['Quantity'].sum().plot(kind='bar')
plt.xticks(rotation=45)
plt.title('Quantity Sold by Product Category')
plt.xlabel('Product Category')
plt.ylabel('Quantity Sold')
plt.show()

df.groupby(['Gender','Product_Category'])['Customer_ID'].count().unstack().plot(kind='bar',stacked=True,figsize=(10,6));

df['Age'].plot(kind='hist', bins=40, title='Age Distribution of Store Customers')
plt.xlabel('Age')
plt.ylabel('Count')
plt.show()

category_counts = df['Product_Category'].value_counts().plot(kind='pie', autopct='%1.1f%%', title='Product Category Distribution')
plt.ylabel(None)
plt.show()

plt.figure(figsize=(10, 6))
df.groupby('Product_Category')['Price_per_Unit'].mean().plot(kind='bar', color='Purple')
plt.title('Average Price per Unit by Product Category')
plt.xlabel('Product Category')
plt.ylabel('Average Price')
plt.xticks(rotation=45)
plt.show()

plt.figure(figsize=(12,8))
sns.lineplot(x=df1.Month, y=df1['Total_Amount'],marker='o', color='b', linestyle='-')
plt.title('Sales Trend Overtime')
plt.xlabel('Month')
plt.ylabel('Total Sales Amount per month')
plt.show()

df1['Num_Month'] = df1['Date'].dt.month

transaction_count = df1.groupby('Num_Month')['Transaction_ID'].count()
transaction_count

plt.figure(figsize=(12,8))
df1.groupby('Num_Month')['Transaction_ID'].count().plot(kind='line',marker='o', color='b', linestyle='-')
plt.title('Transaction Frequency Over Months')
plt.xlabel('Month')
plt.ylabel('Transaction Count')
plt.show()

plt.figure(figsize=(12,8))
sns.barplot(x=transaction_count.index, y=transaction_count.values)
plt.title('Transaction Frequency Over Months')
plt.xlabel('Month')
plt.ylabel('Transaction Count')
plt.show()

sales_per_cat = df1.pivot_table(index='Num_Month', columns='Product_Category', values='Total_Amount')
sales_per_cat.plot(kind='bar',figsize=(12,8));
plt.xticks(rotation=0)
plt.legend(loc='upper left')
plt.show()

age_bins = [0,18,25,35,50,100]
age_group = ['0-18','19-25','26-35','36-50','50+']
df1['Age_Group'] = pd.cut(df1['Age'], bins = age_bins, labels = age_group)
df1.head()

plt.figure(figsize=(12,8))
sns.barplot(x='Age_Group', y='Quantity', hue='Product_Category', data= df1)
plt.title('Product Category purchased by Age group')
plt.xlabel('Age Group')
plt.ylabel('Quantity Purchased')
plt.show()

plt.figure(figsize=(10,6))
plt.scatter(df['Age'],df['Total_Amount'], alpha=0.5)
plt.xlabel('Age')
plt.ylabel('Total Amount')
plt.title('Correlation Between Age and Total Spending')
plt.show()

monthly_sales = df1.groupby(df1['Date'].dt.to_period('M'))['Total_Amount'].sum()

# Plot the time series data
plt.figure(figsize=(10, 6))
monthly_sales.plot(marker='o', color='b', linestyle='-')
plt.title('Monthly Total Sales Amount')
plt.xlabel('Month')
plt.ylabel('Total Sales Amount')
plt.grid(True)
plt.xticks(rotation=45)
plt.show()

df1['DayName'] = df1['Date'].dt.day_name()

daily_sales = df1.groupby(df1['DayName'])['Total_Amount'].sum()
days_of_week = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
daily_sales = daily_sales.reindex(days_of_week)
plt.figure(figsize=(10, 6))
daily_sales.plot(marker='o', color='b', linestyle='-')
plt.title('Monthly Total Sales Amount')
plt.xlabel('Month')
plt.ylabel('Total Sales Amount')
plt.grid(True)
plt.xticks(rotation=45)
plt.show()

df2 = df1.copy()

df2.set_index('Date',inplace=True)

df2.head(2)

monthly_sales = df2['Total_Amount'].resample('M').sum()
plt.figure(figsize=(10, 6))
monthly_sales.plot(marker='o', color='b', linestyle='-')
plt.title('Monthly Sales Trends')
plt.xlabel('Date')
plt.ylabel('Total Sales Amount')
plt.grid(True)
plt.xticks(rotation=45)
plt.show()

df.to_csv('Cleaned Retail sales dataset.csv')

